(* https://github.com/fsprojects/FSharp.Compatibility/blob/master/FSharp.Compatibility.OCaml.LexYacc/Lexing.fs *)
(*

Copyright 2005-2009 Microsoft Corporation
Copyright 2012 Jack Pappas

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*)

/// The run-time library for lexers generated by fslex.
[<CompilerMessage(
    "This module is for ML compatibility. \
    This message can be disabled using '--nowarn:62' or '#nowarn \"62\"'.",
    62, IsHidden = true)>]
[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module FSharp.Compatibility.OCaml.Lexing

open FSharp.Text.Lexing
open System.IO
open System.Text

type position = Position  

type lexbuf = LexBuffer<byte>

//
let from_function (f : byte[] -> int -> int) =
    LexBuffer<byte>.FromByteFunction f

//
let from_text_reader (enc: System.Text.Encoding) (tr: TextReader) =
  LexBuffer<byte>.FromFunction <| fun (bytebuf, start, len) ->
    /// Don't read too many characters!
    let lenc = (len * 99) / enc.GetMaxByteCount(100)
    let charbuf : char[] = Array.zeroCreate lenc
    let nRead = tr.Read (charbuf, start, lenc)
    if nRead = 0 then 0
    else enc.GetBytes (charbuf, 0, nRead, bytebuf, start)

//
let private defaultEncoding =
#if FX_NO_DEFAULT_ENCODING
        Encoding.UTF8
#else
        Encoding.Default
#endif

//
let from_channel (is : TextReader) =
    from_text_reader defaultEncoding is

let from_bytearray s =
    LexBuffer<byte>.FromBytes s

#if FX_NO_ASCII_ENCODING
let from_string s = from_channel (new StringReader(s))
#else
let from_string s = from_bytearray (System.Text.Encoding.ASCII.GetBytes (s:string))
#endif

let from_binary_reader (sr: BinaryReader) = LexBuffer<byte>.FromFunction sr.Read

let lexeme_char (lb:lexbuf) n = char (int32 (lb.LexemeChar n))
let lexeme_start_p (lb:lexbuf) = lb.StartPos
let lexeme_end_p (lb:lexbuf) = lb.EndPos
let lexeme_start (lb:lexbuf) = (lexeme_start_p lb).pos_cnum
let lexeme_end (lb:lexbuf) = (lexeme_end_p lb).pos_cnum
#if FX_NO_ASCII_ENCODING
let lexeme_utf8 (lb:lexbuf) = System.Text.Encoding.UTF8.GetString(lb.Lexeme, 0, lb.Lexeme.Length)
#else
let lexeme (lb:lexbuf) = System.Text.Encoding.ASCII.GetString(lb.Lexeme, 0, lb.Lexeme.Length)
let lexeme_utf8 (lb:lexbuf) = System.Text.Encoding.UTF8.GetString(lb.Lexeme, 0, lb.Lexeme.Length)
#endif

let lexeme_bytes (lb:lexbuf) = lb.Lexeme
let flush_input (lb: lexbuf) = lb.DiscardInput ()


let lexbuf_curr_p lb = lexeme_end_p lb
let lexbuf_set_curr_p (lb:lexbuf) (p : position) = lb.EndPos  <- p
let lexbuf_set_start_p (lb:lexbuf) (p : position) = lb.StartPos <- p